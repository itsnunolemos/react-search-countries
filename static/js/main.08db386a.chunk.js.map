{"version":3,"sources":["redux/action-types/index.js","redux/action-types/country-action-types.js","components/block/country-block.js","pages/homepage/page-homepage.js","redux/actions/country-actions.js","routes/routes.js","redux/reducers/country-reducers.js","redux/reducers/index.js","redux/store.js","App.js","serviceWorker.js","index.js"],"names":["GET_COUNTRIES","FETCH_COUNTRIES","GET_COUNTRY","RESET_COUNTRY","CountryBlock","item","capital","currencies","languages","name","className","role","aria-label","map","i","k","symbol","PageHomepage","handleSearch","event","props","findCountry","getCountry","clearCountry","resetCountry","target","value","length","allCountries","this","getCountries","countries","loading","placeholder","onChange","type","country","key","alpha3Code","rel","href","Component","defaultProps","connect","state","dispatch","actionTypes","fetch","then","response","json","data","payload","Routes","path","exact","component","initialState","items","error","combineReducers","action","filter","o","toLowerCase","includes","store","createStore","rootReducer","compose","applyMiddleware","thunk","window","__REDUX_DEVTOOLS_EXTENSION__","App","basename","location","pathname","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.08db386a.chunk.js","sourcesContent":["\n/**\n * Module dependencies.\n */\n\nimport country from './country-action-types';\n\n/**\n * Export `actionTypes`.\n */\n\nexport default {\n  ...country\n};\n","\n/*\n * Export `CountryActionTypes`.\n */\n\nexport default {\n  GET_COUNTRIES: 'GET_COUNTRIES',\n  FETCH_COUNTRIES: 'FETCH_COUNTRIES',\n  GET_COUNTRY: 'GET_COUNTRY',\n  RESET_COUNTRY: 'RESET_COUNTRY'\n};\n","\n/**\n * Module dependencies.\n */\n\nimport './country-block.scss';\nimport PropTypes from 'prop-types';\nimport React from 'react';\n\n/**\n * `CountryBlock`.\n */\n\nconst CountryBlock = ({ item }) => {\n  const {\n    capital, currencies, languages, name\n  } = item;\n\n  return (\n    <div className=\"country-block\">\n      <h3>{name}</h3>\n      <div className=\"country-block__divide\">\n        <span role=\"img\" aria-label=\"capital\">📍</span>\n        {capital}\n      </div>\n      <div className=\"country-block__divide\">\n        <span role=\"img\" aria-label=\"currency\">💶</span>\n        {currencies.map((i, k) => (\n          `${(k ? ',' : '')} ${i.name} (${i.symbol})`\n        ))}\n      </div>\n      <div className=\"country-block__divide\">\n        <span role=\"img\" aria-label=\"language\">💬</span>\n        {languages.map((i, k) => (\n          `${(k ? ',' : '')} ${i.name}`\n        ))}\n      </div>\n    </div>\n  );\n};\n\n/**\n   * Prop types.\n   */\n\nCountryBlock.propTypes = {\n  item: PropTypes.shape({\n    capital: PropTypes.string,\n    currencies: PropTypes.array,\n    languages: PropTypes.array,\n    name: PropTypes.string\n  }).isRequired\n};\n\n/**\n * Export `CountryBlock`.\n */\n\nexport default CountryBlock;\n","\n/**\n * Module dependencies.\n */\n\nimport PropTypes from 'prop-types';\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { getCountries, getCountry, resetCountry } from '../../redux/actions/country-actions';\nimport CountryBlock from '../../components/block/country-block';\n\n/**\n * `PageHomepage`.\n */\n\nclass PageHomepage extends Component {\n  /**\n   * Component did mount.\n   */\n\n  componentDidMount() {\n    const { getCountries: allCountries } = this.props;\n\n    allCountries();\n  }\n\n  /**\n   * Handle search.\n   */\n\n  handleSearch = (event) => {\n    const { getCountry: findCountry, resetCountry: clearCountry } = this.props;\n\n    if (event.target.value.length > 0) {\n      findCountry(event.target.value);\n    } else {\n      clearCountry();\n    }\n  }\n\n  /**\n   * Render.\n   */\n\n  render() {\n    const { countries: { item, loading } } = this.props;\n\n    return (\n      <>\n        <div className=\"container\">\n          <div className=\"content\">\n            <h1>\n              <span role=\"img\" aria-label=\"world\">🌎</span>\n              Countries\n            </h1>\n            <h2>Get information about countries</h2>\n\n            <div className=\"fake-search\">\n              <span role=\"img\" aria-label=\"magnifying glass\">🔎</span>\n              <input\n                className=\"search\"\n                placeholder=\"Insert a country name\"\n                onChange={this.handleSearch}\n                type=\"text\"\n              />\n            </div>\n\n            {loading && (\n              <div className=\"loading\">\n                Loading ...\n              </div>\n            )}\n\n            {!loading && item && item.map((country) => (\n              <CountryBlock\n                item={country}\n                key={country.alpha3Code}\n              />\n            ))}\n          </div>\n\n          <footer>\n            made with\n            <span role=\"img\" aria-label=\"heart\">💙</span>\n            by itsnunolemos\n\n            <div>\n              <span role=\"img\" aria-label=\"link\">🔗</span>\n              api by\n              <a\n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n                href=\"https://restcountries.eu/\"\n              >\n                restcountries.eu\n              </a>\n            </div>\n\n            <div>\n              <a\n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n                href=\"https://www.twitter.com/itsnunolemos/\"\n              >\n                Twitter\n              </a>\n              <a\n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n                href=\"https://www.medium.com/@itsnunolemos/\"\n              >\n                Medium\n              </a>\n              <a\n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n                href=\"https://www.linkedin.com/in/nunorlemos/\"\n              >\n                Linkedin\n              </a>\n            </div>\n          </footer>\n        </div>\n      </>\n    );\n  }\n}\n\n/**\n * Prop types.\n */\n\nPageHomepage.propTypes = {\n  countries: PropTypes.shape({\n    error: PropTypes.object,\n    item: PropTypes.array,\n    items: PropTypes.array,\n    loading: PropTypes.bool\n  }).isRequired,\n  getCountries: PropTypes.func,\n  getCountry: PropTypes.func,\n  resetCountry: PropTypes.func\n};\n\nPageHomepage.defaultProps = {\n  getCountries: null,\n  getCountry: null,\n  resetCountry: null\n};\n\n/**\n * State and dispatch props.\n */\n\nconst mapStateToProps = (state) => ({\n  countries: state.countries\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  getCountries: () => dispatch(getCountries()),\n  getCountry: (name) => dispatch(getCountry(name)),\n  resetCountry: () => dispatch(resetCountry())\n});\n\n/**\n * Export `PageHomepage`.\n */\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(PageHomepage);\n","\n/**\n * Module dependencies.\n */\n\nimport actionTypes from '../action-types';\n\n/**\n * Get all countries.\n */\n\nexport function getCountries() {\n  return (dispatch) => {\n    dispatch({ type: actionTypes.FETCH_COUNTRIES });\n    return fetch('https://restcountries.eu/rest/v2/all')\n      .then((response) => response.json())\n      .then((data) => {\n        dispatch({ type: actionTypes.GET_COUNTRIES, payload: data });\n      });\n  };\n}\n\n/**\n * Get a specific country.\n */\n\nexport function getCountry(data) {\n  return (dispatch) => {\n    dispatch({ type: actionTypes.GET_COUNTRY, payload: data });\n  };\n}\n\n/**\n * Reset a specific country.\n */\n\nexport function resetCountry() {\n  return (dispatch) => {\n    dispatch({ type: actionTypes.RESET_COUNTRY });\n  };\n}\n","\n/**\n * Module dependencies.\n */\n\nimport { Switch, Route } from 'react-router-dom';\nimport React from 'react';\nimport PageHomepage from '../pages/homepage/page-homepage';\n\n/**\n * Export `Routes`.\n */\n\nexport default function Routes() {\n  return (\n    <Switch>\n      <Route path=\"/\" exact component={PageHomepage} />\n    </Switch>\n  );\n}\n","\n/**\n * Module dependencies.\n */\n\nimport actionTypes from '../action-types';\n\n/**\n * `initialState`.\n */\n\nconst initialState = {\n  items: [],\n  item: [],\n  loading: false,\n  error: null\n};\n\n/**\n * Reducer `countries`.\n */\n\nexport default function countries(state = initialState, action) {\n  switch (action.type) {\n    case actionTypes.FETCH_COUNTRIES:\n      return {\n        ...state,\n        loading: true,\n        error: null\n      };\n\n    case actionTypes.GET_COUNTRIES:\n      return {\n        ...state,\n        loading: false,\n        items: action.payload\n      };\n\n    case actionTypes.GET_COUNTRY:\n      return {\n        ...state,\n        loading: false,\n        item: state.items.filter((o) => o.name.toLowerCase().includes(action.payload.toLowerCase()))\n      };\n\n    case actionTypes.RESET_COUNTRY:\n      return {\n        ...state,\n        loading: false,\n        item: []\n      };\n\n    default:\n      return state;\n  }\n}\n","\n/**\n * Module dependencies.\n */\n\nimport { combineReducers } from 'redux';\nimport countries from './country-reducers';\n\n\n/**\n * Export `rootReducer`.\n */\n\nexport default combineReducers({\n  countries\n});\n","\n/**\n * Module dependencies.\n */\n\nimport { createStore, compose, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\nimport rootReducer from './reducers';\n\nconst store = createStore(\n  rootReducer,\n  compose(\n    applyMiddleware(thunk),\n    window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\n  )\n);\n\n/**\n * Export `store`.\n */\n\nexport default store;\n","\n/**\n * Module dependencies.\n */\n\nimport './styles/global.scss';\nimport { BrowserRouter as Router } from 'react-router-dom';\nimport { Provider } from 'react-redux';\nimport React from 'react';\nimport Routes from './routes/routes';\nimport store from './redux/store';\n\n/**\n * `App`.\n */\n\nfunction App() {\n  return (\n    <Provider store={store}>\n      <Router basename={window.location.pathname || ''}>\n        <Routes />\n      </Router>\n    </Provider>\n  );\n}\n\n/**\n * Export `App`.\n */\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost'\n  // [::1] is the IPv6 localhost address.\n  || window.location.hostname === '[::1]'\n  // 127.0.0.0/8 are considered localhost for IPv4.\n  || window.location.hostname.match(\n    /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n  )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service '\n            + 'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all '\n                + 'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404\n        || (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}